from typing import List
class Solution:
    def isCycle(self, V: int, adj: List[List[int]]) -> bool:
        vis = [False] * V
        
        for i in range(V):
            if not vis[i]:  
                if self.dfsCycle(i, -1, adj, vis):
                    return True
                
        return False
    
    def dfsCycle(self, node: int, parent: int, adj: List[List[int]], vis: List[bool]) -> bool:
        vis[node] = True  
        
        for neighbour in adj[node]:  
            if not vis[neighbour]:  
                if self.dfsCycle(neighbour, node, adj, vis):
                    return True
            elif neighbour != parent:  
                return True
                
        return False


#{ 
 # Driver Code Starts

if __name__ == '__main__':

	T=int(input())
	for i in range(T):
		V, E = map(int, input().split())
		adj = [[] for i in range(V)]
		for _ in range(E):
			u, v = map(int, input().split())
			adj[u].append(v)
			adj[v].append(u)
		obj = Solution()
		ans = obj.isCycle(V, adj)
		if(ans):
			print("1")
		else:
			print("0")

# } Driver Code Ends